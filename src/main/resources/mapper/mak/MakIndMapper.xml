<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pen.app.mak.mapper.MakIndMapper">
<!-- 주문서 기반 계획서[미지시건] 불러오기(모달) -->
<select id="ordPlanning" resultType="PlanVO" parameterType="MakVO">
	select ord_code,ord_det_code,pd_code,plan_code,plan_nm||'-'||prod_name planNm,plan_type,to_char(plan_date,'yyyy-MM-dd') planDate, mak_emp_num,plan_state,pd_prod_code,plan_qnt,plan_qnt re_qnt,to_char(plan_sdate,'yyyy-MM-dd') planSdate, to_char(plan_clsdate,'yyyy-MM-dd') planClsdate, priority, connect_code,prod_code,prod_name,ord_det_price,ord_det_quan,acc_code,acc_name,ord_date,ord_due_date from ordplan_view
	<where>
	<foreach collection="list" item="ordPlan" separator=" and ">
	pd_code != #{ordPlan.pdCode}
	</foreach>
	</where>
	order by ord_due_date
</select>
<!-- 주문서 기반 계획서[지시건] 불러오기(모달) -->
<select id="ordPlanned" resultType="PlanVO" parameterType="MakVO">
	select ord_code,
           ord_det_code,
           pd_code,
           plan_code,
           plan_nm||'-'||prod_name planNm,
           plan_type,
           to_char(plan_date,'yyyy-MM-dd') planDate, 
           mak_emp_num,
           plan_state,
           pd_prod_code,
           plan_qnt,
           plan_qnt - #{reQnt} re_qnt,
           to_char(plan_sdate,'yyyy-MM-dd') planSdate, 
           to_char(plan_clsdate,'yyyy-MM-dd') planClsdate, 
           priority, 
           connect_code,
           prod_code,
           prod_name,
           ord_det_price,
           ord_det_quan,
           acc_code,
           acc_name,
           ord_date,
           ord_due_date from ordplan_view
	<where>
	pd_code = #{pdCode}
	</where>
</select>

<!-- 주문서기반 계획서에서 내린 계획서별 지시건별 총 지시 수량 -->
<select id="getOrdReQnt" resultType="MakVO">
select pd_code,sum(ordr_qnt) re_qnt from mak_indica join ordplan_view using(pd_code) group by pd_code
</select>

<select id="getConReQnt" resultType="MakVO">
select pd_code,sum(ordr_qnt) re_qnt from mak_indica join conplan_view using(pd_code) group by pd_code
</select>

<select id="getIndReQnt" resultType="MakVO">
select pd_code, plan_qnt-sum(ordr_qnt) re_qnt  from mak_plan_detail join mak_indica using(pd_code) group by pd_code, plan_qnt
</select>
<!-- 계약서 기반 계획서 불러오기(모달) -->
<select id="contPlanning" resultType="PlanVO" parameterType="MakVO">
	select cont_code,cont_det_code,pd_code,plan_code,plan_nm||'-'||prod_name planNm,plan_type,to_char(plan_date,'yyyy-mm-dd') planDate,mak_emp_num,plan_state,pd_prod_code,plan_qnt,plan_qnt re_qnt,to_char(plan_sdate,'yyyy-mm-dd') planSdate, to_char(plan_clsdate,'yyyy-mm-dd') planClsdate, priority, connect_code,prod_code,prod_name,cont_det_quan,cont_det_release,cont_det_progress,acc_code,acc_name,to_char(cont_date,'yyyy-mm-dd') contDate,to_char(cont_due_date,'yyyy-MM-dd') contDueDate from conplan_view
		<where>
	<foreach collection="list" item="ordPlan" separator=" and ">
	pd_code != #{ordPlan.pdCode}
	</foreach>
	</where>
	order by cont_det_release
</select>

<select id="contPlanned" resultType="PlanVO" parameterType="MakVO">
	select cont_code,cont_det_code,pd_code,plan_code,plan_nm||'-'||prod_name planNm,plan_type,to_char(plan_date,'yyyy-mm-dd') planDate,mak_emp_num,plan_state,pd_prod_code,plan_qnt,plan_qnt-#{reQnt} re_qnt,to_char(plan_sdate,'yyyy-mm-dd') planSdate, to_char(plan_clsdate,'yyyy-mm-dd') planClsdate, priority, connect_code,prod_code,prod_name,cont_det_quan,cont_det_release,cont_det_progress,acc_code,acc_name,to_char(cont_date,'yyyy-mm-dd') contDate,to_char(cont_due_date,'yyyy-MM-dd') contDueDate from conplan_view
		<where>
	pd_code = #{pdCode}
	</where>
</select>


<select id="indList" resultType="MakVO" parameterType="string">
	select prod_name,pd_code,plan_code,plan_nm,plan_type,mak_emp_num,plan_state,pd_prod_code,plan_qnt,to_char(plan_sdate,'yyyy-mm-dd') plan_sdate, to_char(plan_clsdate,'yyyy-mm-dd') plan_clsdate,priority,indica_code,indica_nm,emp_num,prod_code,ordr_qnt,to_char(indica_date,'yyyy-mm-dd') indica_date, to_char(st_date,'yyyy-mm-dd') st_date,to_char(cls_date,'yyyy-mm-dd') cls_date, indica_state from mak_plan join mak_plan_detail using(plan_code) join mak_indica using(pd_code) join com_code_prod using(prod_code) where pd_code = #{pdCode} and cls_date>=to_date(sysdate,'yyyy-mm-dd') and indica_state in ('미작업','작업중')
</select>

<select id="planFlow" parameterType="string" resultType="MakVO">
	select * 
		from com_proc_flow a join com_code_proc b using(proc_code)
			right outer join (
				select * 
					from(SELECT 
				    	LEVEL LEV,
				    	PARENT_CODE,
				    	BOM_MAT_TYPE,
				    	BOM_PROD_CODE,
				    	BOM_PROD_NAME,
				    	BOM_MAT_UNIT,
				    	BOM_MAT_USAGE,
				    	PROC_CODE
						FROM (SELECT  
							B.BOM_PROD_CODE AS PARENT_CODE,
							BOM_MAT_TYPE,
							A.BOM_PROD_CODE,
							A.BOM_PROD_NAME,
							BOM_MAT_UNIT,
							BOM_MAT_USAGE,
							PROC_CODE
							FROM (SELECT
								BOM_PROD_CODE,
								BOM_PROD_NAME
								FROM (SELECT
									BOM_PROD_CODE,
									BOM_PROD_NAME,
									BOM_MAT_CODE,
									BOM_MAT_NAME 
									FROM COM_BOM
									WHERE 
										BOM_PROD_CODE = #{prodCode}
										OR BOM_PROD_CODE IN (SELECT BOM_MAT_CODE FROM COM_BOM WHERE BOM_PROD_CODE = #{prodCode}))
											UNION
												SELECT BOM_MAT_CODE, 
												BOM_MAT_NAME
												FROM (SELECT 
													BOM_PROD_CODE, 
													BOM_PROD_NAME, 
													BOM_MAT_CODE, 
													BOM_MAT_NAME 
													FROM COM_BOM
													WHERE BOM_PROD_CODE = #{prodCode} 
														OR BOM_PROD_CODE IN (SELECT BOM_MAT_CODE FROM COM_BOM WHERE BOM_PROD_CODE = #{prodCode}))) A 
															LEFT OUTER JOIN COM_BOM B ON (A.BOM_PROD_CODE = B.BOM_MAT_CODE))
																START WITH PARENT_CODE IS NULL
																CONNECT BY PARENT_CODE = PRIOR BOM_PROD_CODE)) using(proc_code) order by lev desc
</select>

<select id="getIndicatedBom" resultType="MakVO" parameterType="string">
select a.mak_bom_code,a.mak_flow_code,a.mak_step,a.prod_code,a.amount,a.plan_indica,b.proc_code,c.bom_code,c.bom_prod_code parent_code,c.bom_prod_name prod_name,c.bom_mat_type,c.bom_mat_name bom_prod_name,c.bom_mat_code bom_prod_code,c.bom_mat_usage,d.proc_type,d.proc_name from mak_bom a join mak_flow b on a.mak_flow_code = b.mak_flow_code join com_bom  c on b.proc_code=c.proc_code and a.prod_code = c.bom_mat_code join com_code_proc d on b.proc_code =d.proc_code  where plan_indica = #{indicaCode} order by mak_step
</select>

<select id="getOperateCheck" parameterType="MakVO" resultType="MakVO" >
	select fac_name,fac_code,operate_check,proc_code,proc_name from fac_info join fac_conn_proc using(fac_code) join com_code_proc using(proc_code) where proc_code in (
	<foreach collection="list" item="pc" separator="," close=")">
		#{pc.procCode}
	</foreach>
	order by fac_code
</select>


<select id="getFlowList" parameterType="MakVO" resultType="MakVO">
	select proc_order + (select max(proc_order) from com_proc_flow where flow_prod_code like('SE%') and flow_prod_code in (
	<foreach collection="list" item="pc" separator="," close=")">
		#{pc.parentCode}
	</foreach>
	) proc_order,
	proc_flow_code,
	proc_code,
	flow_prod_code,
	proc_type,
	proc_name 
	    from com_proc_flow join com_code_proc using(proc_code) 
	            where flow_prod_code like ('PR%')
						and flow_prod_code in (
							<foreach collection="list" item="pc" separator="," close=")">
								#{pc.parentCode}
							</foreach>
								union
									select proc_order,
									       proc_flow_code,
									       proc_code,
									       flow_prod_code,
									       proc_type,
									       proc_name
									          from com_proc_flow join com_code_proc using(proc_code)
									                   where flow_prod_code like('SE%') and flow_prod_code in (
															<foreach collection="list" item="pc" separator="," close=")">
																#{pc.parentCode}
															</foreach>
															order by proc_order
														</select>
<!-- 
<select id="getFlowList" parameterType="MakVO" resultType="MakVO">
	
	select * from com_proc_flow a join com_code_proc b using(proc_code) where flow_prod_code in (
	<foreach collection="list" item="pc" separator="," close=")">
		#{pc.parentCode}
	</foreach>
	order by proc_order
</select> -->

<update id="insertIndica" parameterType="MakVO">
	insert into mak_indica(indica_code,
						   indica_nm,
						   emp_num,
						   prod_code,
						   ordr_qnt,
						   indica_date,
						   st_date,
						   cls_date,
						   pd_code) values
						             (get_indica_seq(),
						             #{indicaNm},
						             '1111',
						             #{prodCode},
						             #{ordrQnt},
						             to_date(#{indicaDate},'yyyy-mm-dd'),
						             to_date(#{stDate},'yyyy-mm-dd'),
						             to_date(#{clsDate},'yyyy-mm-dd'),
						             #{pdCode})
</update>

<update id="insertBOM">
insert into mak_bom(mak_bom_code,
                    mak_step,
                    prod_code,
                    amount,
                    plan_indica,
                    mak_flow_code,
                    result_code) values(
                                        mak_bom_seq.nextval,
                                        #{makStep},
                                        #{bomProdCode},
                                        #{amount},
                                        'MAK-IND-'||(select last_number-1 from user_sequences where sequence_name='MAK_INDICA_SEQ'),
                                        #{makFlowCode},
                                        #{resultCode}
                                        )
</update>

<update id="insertFlow">
insert into mak_flow(mak_flow_code,
                     mak_flow_step,
                     proc_code,
                     indica_code
                     ) values(
                                          mak_flow_seq.nextval,
                                          #{makFlowStep},
                                          #{procCode},
                                          'MAK-IND-'||(select last_number-1 from user_sequences where sequence_name='MAK_INDICA_SEQ')
                                          )
</update>

<select id="getFlowSeq" resultType="integer">
select mak_flow_seq.currval from dual
</select>

<select id="getCurrBom" resultType="MakVO">
select prod_code,sum(amount) amount from mak_bom where plan_indica='MAK-IND-'||(select last_number-1 from user_sequences where sequence_name='MAK_INDICA_SEQ') and prod_code like 'MA%' group by prod_code
</select>

<select id="getMatQnt" resultType="MakVO" parameterType="string">
select mat_lot,mat_code,mat_name,mat_qnt,mat_state from mat_invntry where mat_code=#{prodCode} and mat_qnt>0 and NVL(mat_keepdate,sysdate+1)>=to_date(sysdate,'yyyy-mm-dd') order by mat_lot
</select>

<update id="insertHold" parameterType="MakVO">
insert into mak_hold(rsc_code,indica_code,mat_code,mat_lot,cnt,hold_date) values(get_hold_seq(),'MAK-IND-'||(select last_number-1 from user_sequences where sequence_name='MAK_INDICA_SEQ'),#{matCode},#{matLot},#{cnt},sysdate)
</update>
<update id="updateMat" parameterType="MakVO">
update mat_invntry set mat_qnt=mat_qnt-#{cnt} where mat_lot = #{matLot} 
</update>

<update id="updateIndica" parameterType="MakVO">
update mak_indica set ORDR_QNT = #{ordrQnt}, st_date=#{stDate}, cls_date=#{clsDate} where indica_code = #{indicaCode}
</update>

<update id="updateMakBom" parameterType="MakVO">
update mak_bom set amount = #{amount} where mak_bom_code = #{makBomCode}
</update>

<select id="getIndMakHold" parameterType="string" resultType="MakVO">
select rsc_code,mat_code,mat_lot,cnt from mak_hold where indica_code=#{indicaCode}
</select>

<update id="updateIndMakHold" parameterType="MakVO">
update mak_hold set hold_state = case when cnt-#{cnt} = 0 then '작업완료' else '미작업'  end, cnt = cnt - #{cnt}  where rsc_code = #{rscCode}
</update>

<update id="updateIndMakMat" parameterType="MakVO">
update mat_invntry set mat_qnt=mat_qnt + #{cnt} where mat_lot=#{matLot}
</update>

<delete id="delIndica" parameterType="MakVO">
delete mak_indica where indica_code=#{indicaCode}
</delete>
<delete id="delIndBom" parameterType="integer">
delete mak_bom where mak_bom_code=#{makBomCode}
</delete>

<delete id="delIndFlow" parameterType="integer">
delete mak_flow where mak_flow_code=#{makFlowCode}
</delete>

<delete id="delIndHold" parameterType="string">
delete mak_hold where indica_code=#{indicaCode}
</delete>

<select id="dirIndList" resultType="MakVO">
select prod_name,indica_code,indica_nm,emp_num,prod_code,ordr_qnt,to_char(indica_date,'yyyy-mm-dd') indica_date, to_char(st_date,'yyyy-mm-dd') st_date,to_char(cls_date,'yyyy-mm-dd') cls_date, indica_state from mak_indica join com_code_prod using(prod_code) where pd_code is null and cls_date>=to_date(sysdate,'yyyy-mm-dd') and indica_state in ('미작업','작업중')
</select>

<select id="product" resultType="MakVO">
select * from com_code_prod
</select>

<select id="modalProd" parameterType="string" resultType="MakVO">
select * from com_code_prod where prod_name like ('%'||#{prodName}||'%')
</select>

<select id="perfIndList" resultType="MakVO">
select prod_code, indica_code,indica_nm,emp_num,ordr_qnt,to_char(indica_date,'yyyy-mm-dd') indica_date, to_char(st_date,'yyyy-mm-dd') st_date, to_char(cls_date,'yyyy-mm-dd') cls_date, indica_state, pd_code,prod_code,prod_name from mak_indica join com_code_prod using(prod_code)
</select>

<select id="oerfProcList" resultType="MakVO" parameterType="string">
SELECT
    proc_code,
    COUNT(proc_code) count,
    indica_code,
    proc_name,
    indica_state,
    ordr_qnt,
    mak_flow_step,
    ordr_qnt-nvl(re_qnt,0) re_qnt
FROM
         mak_flow
    JOIN mak_bom USING ( mak_flow_code )
    JOIN mak_indica USING ( indica_code )
    JOIN com_code_proc USING ( proc_code )
    LEFT OUTER JOIN (
     SELECT
            indica_code,
            proc_code,
            SUM(prod_cnt) re_qnt
        FROM
            mak_proc_prod
        WHERE
                indica_code = #{indicaCode}
        GROUP BY
            proc_code,
            indica_code
    ) USING ( proc_code,
              indica_code )    
WHERE
    indica_code = #{indica_code}
GROUP BY
    proc_code,
    indica_code,
    proc_name,
    indica_state,
    ordr_qnt,
    mak_flow_step,
    re_qnt
intersect
SELECT
    proc_code,
    COUNT(proc_code) count,
    indica_code,
    proc_name,
    indica_state,
    ordr_qnt,
    mak_flow_step,
    ordr_qnt-nvl(re_qnt,0) re_qnt
FROM
         mak_hold
    JOIN mak_indica USING ( indica_code )
    JOIN mak_bom b ON indica_code = plan_indica
    JOIN mak_flow USING ( mak_flow_code,
                          indica_code )
    JOIN com_code_proc USING ( proc_code )
    LEFT OUTER JOIN (
     SELECT
            indica_code,
            proc_code,
            SUM(prod_cnt) re_qnt
        FROM
            mak_proc_prod
        WHERE
                indica_code = #{indicaCode}
        GROUP BY
            proc_code,
            indica_code
    ) USING ( proc_code,
              indica_code )   
WHERE
        indica_code = #{indicaCode}
    AND mat_code = b.prod_code
        AND mat_code LIKE 'MAT%'
            OR indica_code = #{indicaCode}
               AND mat_code = b.prod_code
                   AND mat_code LIKE 'SEM%'
                       AND qip_code_list_prod IS NOT NULL
GROUP BY
    proc_code,
    indica_code,
    proc_name,
    indica_state,
    ordr_qnt,
    mak_flow_step,
    re_qnt
ORDER BY
	mak_flow_step
</select>

<select id="getAllProcMat" resultType="MakVO" parameterType="MakVO">
SELECT
    amount / ordr_qnt                bom_mat_usage,
    proc_code,
    cnt,
    mat_code,
    mat_name,
    semi_name,
    nvl(ordr_qnt - re_qnt, ordr_qnt) ordr_qnt,
    result_code,
    mat_lot,
    rsc_code,
    mak_bom_code
FROM
         mak_bom a
    JOIN mak_flow USING ( mak_flow_code )
    JOIN mak_indica USING ( indica_code )
    JOIN mak_hold      d USING ( indica_code )
    LEFT OUTER JOIN mat_invntry USING ( mat_lot,
                                        mat_code )
    LEFT OUTER JOIN com_code_semi e ON ( e.semi_code = mat_code )
    LEFT OUTER JOIN (
        SELECT
            indica_code,
            proc_code,
            SUM(prod_cnt) re_qnt
        FROM
            mak_proc_prod
        WHERE
                indica_code = #{indicaCode}
            AND proc_code = #{procCode}
        GROUP BY
            proc_code,
            indica_code
    ) USING ( proc_code,
              indica_code )
WHERE
        mat_code = a.prod_code
    AND indica_code = #{indicaCode}
    AND proc_code = #{procCode}
</select>
<select id="getProcFac" resultType="MakVO" parameterType="string">
         SELECT
    proc_code,
    fac_code,
    fac_name,
    install_date,
    temp_min,
    temp_max,
    maker_name,
    check_cycle,
    operate_check,
    fac_proc,
    proc_name,
    proc_type,
    proc_detail,
    prcs_code,
    indica_code,
    prod_nm,
    a.emp_num,
    prod_cnt,
    prcs_fr_date,
    prcs_fl_date,
    prcs_state,
    rsc_code
FROM
         fac_info
    JOIN fac_conn_proc USING ( fac_code )
    JOIN com_code_proc USING ( proc_code )
    LEFT OUTER JOIN (
        SELECT
            proc_code,
            fac_code,
            fac_name,
            install_date,
            temp_min,
            temp_max,
            maker_name,
            check_cycle,
            operate_check,
            fac_proc,
            proc_name,
            proc_type,
            proc_detail,
            prcs_code,
            indica_code,
            prod_nm,
            a.emp_num,
            prod_cnt,
            prcs_fr_date,
            prcs_fl_date,
            prcs_state,
            rsc_code
        FROM
                 fac_info
            JOIN fac_conn_proc USING ( fac_code )
            JOIN com_code_proc USING ( proc_code )
            LEFT OUTER JOIN mak_proc_prod a USING ( fac_code,
                                                    proc_code )
        WHERE
                proc_code = #{procCode}
            AND operate_check = 'Y'
            AND prcs_fl_date IS NULL
    ) a USING ( proc_code,
                fac_code,
                fac_name,
                install_date,
                temp_min,
                temp_max,
                maker_name,
                check_cycle,
                operate_check,
                fac_proc,
                proc_name,
                proc_type,
                proc_detail )
WHERE
        proc_code = #{procCode}
    AND operate_check = 'Y'
    AND prcs_fl_date IS NULL
</select>
 <!-- 사원 리스트 출력 -->
 <select id="userList" resultType="MakVO">
SELECT
    *
FROM
         com_info_emp
    JOIN com_code_auth USING ( auth_code )
    LEFT OUTER JOIN (
        SELECT
            *
        FROM
                 com_info_emp
            JOIN com_code_auth USING ( auth_code )
            LEFT OUTER JOIN mak_proc_prod USING ( emp_num )
        WHERE
            auth_name LIKE '%생산%'
            AND prcs_fl_date IS NULL
    ) USING ( emp_num,
              auth_code,
              emp_name,
              emp_id,
              emp_tel,
              emp_pw,
              hire_date,
              auth_name )
WHERE
    auth_name LIKE '%생산%'
ORDER BY
    emp_num
 </select>
 
 <update id="insertProcProd" parameterType="MakVO">
 insert
    INTO mak_proc_prod (
        prcs_code,
        indica_code,
        prod_nm,
        proc_code,
        fac_code,
        emp_num,
        prod_cnt,
        prcs_fr_date,
        prcs_state
    ) values (
    	get_prcs_seq(),
    	#{indicaCode},
    	#{prodNm},
    	#{procCode},
    	#{facCode},
    	#{empNum},
    	0,
    	to_date(current_date,'yyyy-mm-dd HH24:mi:ss'),
    	'작업중'
    	 )
 </update>
 
 <update id="updateProcInd" parameterType="string">
 update mak_indica set indica_state='작업중' where indica_code=#{indicaCode}
 </update>
 
 <select id="selectProd" parameterType="string" resultType="MakVO">
 select * from com_code_prod where prod_code=#{resultCode}
 </select>
 
 <select id="selectSemi" parameterType="string" resultType="MakVO">
 select * from com_code_semi where semi_code=#{resultCode}
 </select>
 
 <select id="getProcProd" parameterType="MakVO" resultType="string">
 select prcs_code from mak_proc_prod where indica_code=#{indicaCode} and emp_num=#{empNum} and proc_code =#{procCode} and prcs_fl_date is null
 </select>
 
 <update id="updateProcProd" parameterType="MakVO">
 update mak_proc_prod set prod_cnt=#{prodCnt}, prcs_fl_date=to_date(current_date,'yyyy-mm-dd HH24:mi:ss'), rsc_code ='MAK-HOLD-'||(select last_number-1 from user_sequences where sequence_name='MAK_HOLD_SEQ'),prcs_state='작업완료' where prcs_code=#{prcsCode}
 </update>
 
 <update id="insertMatDlivy" parameterType="MakVO">
insert
    INTO mat_dlivy (
        mat_dlivycode,
        mat_code,
        mat_name,
        mat_lot,
        mat_dlivydate,
        mat_dlivyqnt,
        emp_num,
        mat_content
    ) values(GET_MAK_dilvy_seq(),
    		#{matCode},
    		#{matName},
    		#{matLot},
    		to_date(sysdate,'yyyy-mm-dd HH24:mi:ss'),
    		#{cnt},
    		#{empNum},
    		'제조공정'
    		 )
 </update>
 <update id="insertProcSemiHold" parameterType="MakVO">
 insert into mak_hold(
 				rsc_code,
 				indica_code,
 				mat_code,
 				mat_lot,
 				cnt,
 				hold_date
 				)
 		 values(get_hold_seq(),#{indicaCode},#{prodCode},get_semi_lot_seq(),#{prodCnt},to_date(sysdate))
 		 
 </update> 
 
 <update id="insertProcPrdt" parameterType="MakVO">
 insert into mak_prdt(
 					prdt_lot,
 					prcs_code,
 					prod_code,
 					prdt_nm,
 					cnt,
 					prdt_date,
 					prdt_unit,
 					prdt_state
 					)
 					values(
 					get_prd_lot_seq(),
 					#{prcsCode},
 					#{prodCode},
 					#{prdtNm},
 					#{prodCnt},
 					to_date(sysdate),
 					'EA',
 					'입고대기'
 					)
 </update>
 
 <!-- <update id="updateIndica">
 update mak_indica a, mak_hold b set 
 </update> -->
</mapper>