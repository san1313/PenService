<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pen.app.bns.mapper.BnsMapper">

	<!-- 주문서 전체 조회 -->
	<select id="getOrdList" resultType="BnsOrdVO">
		select distinct 
		       o.ord_code
		       ord_code, 
		       acc_code,
		       acc_name,
		       to_char(ord_date,'YYYY-MM-DD') as ord_date,
		       to_char(ord_due_date,'YYYY-MM-DD') as ord_due_date,
		       ord_progress, 
		       e.emp_name,
		       ord_note
		       
		 from  bns_order_detail d 
		 join  bns_order o
		   on  (d.ord_code =o.ord_code)
		 join  com_info_emp e
		   on  (o.emp_num = e.emp_num)
		   
		order by ord_code desc
	</select>

	<!-- 주문서 조건 조회 -->
	<select id="getOrdListCon" resultType="BnsOrdVO">
	
	select *
	from(
		select distinct o.ord_code
		ord_code, acc_code,
		acc_name,to_char(ord_date,'YYYY-MM-DD') as
		ord_date,
		to_char(ord_due_date,'YYYY-MM-DD') as
		ord_due_date,ord_progress,
		e.emp_name emp_name,ord_note
		from
		bns_order_detail d join bns_order o
		on(d.ord_code =o.ord_code)
		join
		com_info_emp e
		on(o.emp_num = e.emp_num)
		<where>
		<if test="all == 'all' "> 
		 and o.ord_progress is not null
		</if>
		<if test="all == 'ing'"> 
		 and o.ord_progress != '출고완료'
		</if>
		<if test="all == 'finish'"> 
		 and o.ord_progress = '출고완료'
		</if>
		<if test="accName != null and accName != ''"> 
		 and o.acc_name = #{accName}
		</if>
		<if test="ordDate1 != null and ordDate1 != ''">
	<![CDATA[
			and ord_date >= TO_DATE(#{ordDate1}, 'YYYY-MM-DD') 
	]]>
		</if>
	<if test="ordDate2 != null and ordDate2 != ''">
	<![CDATA[		
		and ord_date <= TO_DATE(#{ordDate2}, 'YYYY-MM-DD')
	]]>
		</if>
		<if test="ordDueDate1 != null and ordDueDate1 != ''">
	<![CDATA[		
		and ord_due_date >= TO_DATE(#{ordDueDate1}, 'YYYY-MM-DD')
	]]>
		</if>
		<if test="ordDueDate2 != null and ordDueDate2 != ''">
	<![CDATA[		
		and ord_due_date <= TO_DATE(#{ordDueDate2}, 'YYYY-MM-DD')
	]]>
		</if>
		</where>
		order by o.ord_code)
	</select>

	<!-- 주문서 등록 -->
	<insert id="insertOrdList">
		insert all into bns_order values('bns_ord_'||LPAD(ord_seq.nextval, 3,'0'),
		#{list[0].accCode},
		#{list[0].accName},
		#{list[0].ordDate},
		#{list[0].ordDueDate},
		'접수완료',
		#{list[0].empNum},
		null)
		<foreach collection="list" item="vo"
			close="SELECT * FROM DUAL" separator=" ">
			into bns_order_detail
			values('bns_ord_det_'||LPAD(get_ord_det_seq,3,'0'),'bns_ord_'||LPAD(ord_seq.currval,
			3,
			'0'),#{vo.prodCode},#{vo.prodName},#{vo.ordDetPrice},#{vo.ordDetQuan},#{vo.ordDetTotPrice},'접수완료')
		</foreach>
	</insert>

	<!-- 주문서 수정 -->
	<update id="modOrdList">

		declare begin
		update bns_order set ord_due_date = #{list[0].ordDueDate}
		, ord_note =
		#{list[0].ordNote} where ord_code = #{list[0].ordCode};

		<foreach collection="list" item="vo" index="index"
			separator=";" close="; END;">

			merge into
			bns_order_detail
			using dual
			on(ord_det_code =
			#{vo.ordDetCode})

			when matched then
			UPDATE
			SET
			       ord_det_price =	#{vo.ordDetPrice},
			       ord_det_quan = #{vo.ordDetQuan},
			       ord_det_tot_price =	#{vo.ordDetTotPrice}
			 where ord_code = #{vo.ordCode}

			WHEN NOT MATCHED
			THEN
			insert(ord_det_code,ord_code,prod_code,prod_name,ord_det_price,ord_det_quan,ord_det_tot_price)
			values('bns_ord_det'||LPAD(get_ord_det_seq,3,'0'),#{vo.ordCode},#{vo.prodCode},#{vo.prodName},#{vo.ordDetPrice},#{vo.ordDetQuan},#{vo.ordDetTotPrice})

			<!-- UPDATE bns_order_detail SET ord_det_code = #{vo.ordDetCode}, ord_code 
				= ${vo.ordCode}, prod_code = #{vo.prodCode}, prod_name = #{vo.prodName}, 
				ord_det_price = #{vo.ordDetPrice}, ord_det_quan = #{vo.ordDetQuan}, ord_det_tot_price 
				= #{vo.ordDetTotPrice} where ord_code = #{vo.ordCode} -->
		</foreach>

	</update>

	<!-- 주문상세 취소 -->
	<delete id="delOrdDetList">
		delete from bns_order_detail 
		 where
		<foreach collection="list" item="vo" separator="OR">
			ord_det_code =	#{vo.ordDetCode}
		</foreach>
	</delete>

	<!-- 주문서 취소 -->
	<delete id="delOrdList">
		delete from bns_order where
		<foreach collection="list" item="vo" separator="OR">
			ord_code = #{vo.ordCode}
		</foreach>
	</delete>

	<!-- <select id="getEmpList" resultType="BnsEmpVO"> select emp_num, emp_name 
		from com_info_emp </select> -->

	<!-- <select id ="getEmpKeyList" resultType="BnsEmpVO"> select emp_num, 
		emp_name from com_info_emp where emp_name =#{keyword} </select> -->

<!-- 삭제 -->
	<!-- 거래처코드,거래처명 조회 -->
	<select id="getAccList" resultType="BnsAccVO">
		select acc_code, acc_name
		from com_code_account
	</select>

	<!-- 거래처코드, 거래처명 검색 조회 -->
	<select id="getAccKeyList" resultType="BnsAccVO">
		select acc_code, acc_name
		from com_code_account
		<if test="keyword != null and keyword != ''">
		where acc_name =#{keyword}
		</if>
	</select>

	<!-- 제품코드, 제품명 조회 -->
	<select id="getProdList" resultType="BnsProdVO">
		select prod_code, prod_name
		from com_code_prod
	</select>

	<!-- 제품코드, 제품명 검색 조회 -->
	<select id="getProdKeyList" resultType="BnsProdVO">
		select prod_code,
		prod_name
		from com_code_prod
		where prod_name = #{keyword}
	</select>

	<!-- 주문코드,현재날짜 조회 -->
	<select id="getOrdCode" resultType="BnsOrdVO">
		select	'bns_ord_'||max(lpad(subStr(ord_code,-3)+1,3,'0')) ord_code,
		        to_char(sysdate,'YYYY-MM-DD') as ord_date 
		from bns_order
	</select>


	<!-- 주문서 수정 모달창 내의 제품 리스트 조회 -->
	<select id="getProdModList" resultType="BnsOrdVO">
		select *
		from bns_order_detail
		where ord_code = #{keyword}
	</select>
<!-- 계약서 -->
	<!-- 계약서 전체 조회 -->
	<select id="getContList" resultType="BnsContVO">
		select distinct c.cont_code
		cont_code, acc_code,
		acc_name,to_char(cont_date,'YYYY-MM-DD') as
		cont_date,to_char(cont_start_date,'YYYY-MM-DD') as
		cont_start_date,to_char(cont_due_date,'YYYY-MM-DD') as
		cont_due_date,cont_progress, e.emp_name emp_name,cont_note
		from
		bns_contract_detail d join bns_contract c
		on(d.cont_code =c.cont_code)
		join com_info_emp e
		on(c.emp_num = e.emp_num)
		order by cont_code desc
	</select>

	<!-- 계약코드,현재날짜 조회 -->
	<select id="getContCode" resultType="BnsContVO">
		select
		'bns_cont_'||max(lpad(subStr(cont_code,-3)+1,3,'0')) cont_code,
		to_char(sysdate,'YYYY-MM-DD') as cont_date from bns_contract
	</select>

	<!-- 계약서 조건 조회 -->
	<select id="getContListCon" resultType="BnsContVO"> 
	select *
	from(
		select distinct 
		c.cont_code cont_code,
		 acc_code, 
		 acc_name,
		 to_char(cont_date,'YYYY-MM-DD') as cont_date,
		 to_char(cont_due_date,'YYYY-MM-DD') as cont_due_date,
		 cont_progress, 
		e.emp_name emp_name,
		cont_note 
		from bns_contract_detail d join bns_contract 
		c on(d.cont_code =c.cont_code) 
		join com_info_emp e on(c.emp_num = e.emp_num)
		<where>
		 
		 
		<if test="all == 'all' "> 
		 and c.cont_progress is not null
		</if>
		<if test="all == 'ing'"> 
		 and c.cont_progress != '출고완료'
		</if>
		<if test="all == 'finish'"> 
		 and c.cont_progress = '출고완료'
		</if>
		<if test="accName != null and accName != ''"> 
		 and c.acc_name = #{accName}
		</if>
		
		<if test="contDate1 != null and contDate1 != ''">
	<![CDATA[
			and cont_date >= TO_DATE(#{contDate1}, 'YYYY-MM-DD') 
	]]>
		</if>
		
	<if test="contDate2 != null and contDate2 != ''">
	<![CDATA[		
		and cont_date <= TO_DATE(#{contDate2}, 'YYYY-MM-DD')
	]]>
		</if>
		<if test="contDueDate1 != null and contDueDate1 != ''">
	<![CDATA[		
		and cont_due_date >= TO_DATE(#{contDueDate1}, 'YYYY-MM-DD')
	]]>
		</if>
		<if test="contDueDate2 != null and contDueDate2 != ''">
	<![CDATA[		
		and cont_due_date <= TO_DATE(#{contDueDate2}, 'YYYY-MM-DD')
	]]>
		</if>
		</where>
		order by c.cont_code)
	</select>

	<!-- 계약서 등록 -->
	<insert id="insertContList">
		insert all into bns_contract
		values('bns_cont_'||LPAD(cont_seq.nextval, 3,'0'),#{list[0].accCode},#{list[0].accName},#{list[0].contDate},#{list[0].contDueDate},'접수완료',null,#{list[0].empNum},
		#{list[0].contStartDate})
		<foreach collection="list" item="vo"
			close="SELECT * FROM DUAL" separator=" ">
			into bns_contract_detail
			values('bns_cont_det_'||LPAD(get_cont_det_seq,3,'0'),'bns_cont_'||LPAD(cont_seq.currval,
			3,
			'0'),#{vo.prodCode},#{vo.prodName},#{vo.contDetPrice},#{vo.contDetQuan},#{vo.contDetRelease},'납기불필요',#{vo.contDetTotPrice})
		</foreach>
	</insert>

	<!-- 계약서 수정 -->
	<update id="modContList">
		declare begin
		update bns_contract set cont_start_date =
		#{list[0].contStartDate},
		cont_due_date = #{list[0].contDueDate} ,
		cont_note =
		#{list[0].contNote} where cont_code = #{list[0].contCode};
		<foreach collection="list" item="vo" index="index"
			separator=";" close="; END;">
			merge into
			bns_contract_detail
			using dual
			on(cont_det_code =
			#{vo.contDetCode})
			when matched then
			UPDATE
			SET
			cont_det_price =
			#{vo.contDetPrice},
			cont_det_quan = #{vo.contDetQuan},
			cont_det_tot_price = #{vo.contDetTotPrice},
			cont_det_release =
			#{vo.contDetRelease}

			where cont_code = #{vo.contCode}
			WHEN NOT MATCHED
			THEN
			insert(cont_det_code,cont_code,prod_code,prod_name,cont_det_price,cont_det_quan,cont_det_release,cont_det_progress,cont_det_tot_price)
			values('bns_cont_det_'||LPAD(get_cont_det_seq,3,'0'),#{vo.contCode},#{vo.prodCode},#{vo.prodName},#{vo.contDetPrice},#{vo.contDetQuan},#{vo.contDetRelease},'납기불필요',#{vo.contDetTotPrice})
			
		</foreach>
	</update>

	<!-- 계약 상세 취소 -->
	<delete id="delContDetList">
		delete from bns_contract_detail where
		<foreach collection="list" item="vo" separator="OR">
			cont_det_code =
			#{vo.contDetCode}
		</foreach>
	</delete>

	<!-- 계약서 취소 -->
	<delete id="delContList">
		delete from bns_contract where
		<foreach collection="list" item="vo" separator="OR">
			cont_code = #{vo.contCode}
		</foreach>
	</delete>

	<!-- 계약서 수정 모달창 내의 제품 리스트 조회 -->
	<select id="getContProdModList" resultType="BnsContVO">
		select
		cont_det_code,prod_name, prod_code, cont_det_quan, cont_det_price,
		cont_det_tot_price,to_char(cont_det_release,'yyyy-mm-dd') as
		cont_det_release,cont_det_progress
		from bns_contract_detail
		where cont_code = #{keyword}
	</select>

<!-- 입고전 그리드 조회 -->
	<select id="getbeforeStoreList" resultType="BnsStoreVO">
	select prdt_lot, prcs_code, prod_code, prdt_nm, cnt, to_char(prdt_date,'yyyy-mm-dd') prdt_date, prdt_unit, qip_code_list_prod, prdt_state from MAK_PRDT where prdt_state = '입고대기' order by prdt_lot desc
	<!-- 수정해야 될 쿼리 select * from mak_prdt join mak_proc_prod using(prcs_code) where proc_code='PROC8' -->
	</select>

<!-- 입고후 그리드 조회 -->
	<select id="getafterStoreList" resultType="BnsStoreVO">
	select p.prdt_lot, b.prdt_nm, b.bns_store_quan, to_char(bns_store_date,'yyyy-mm-dd') bns_store_date, e.emp_name emp_name, b.bns_store_note, p.prdt_state 
    from com_info_emp e join bns_store b on(b.emp_num = e.emp_num)
    join mak_prdt p on (b.prdt_lot = p.prdt_lot)
    where p.prdt_state = '입고완료'
    order by p.prdt_lot desc
	</select>
	
	<!-- 입고 등록 -->
	<insert id="insertStore" statementType="CALLABLE">
		
		{call prdt_store_register (
			#{prdtLot, mode=IN, jdbcType=VARCHAR},
			#{prdtNm, mode=IN, jdbcType=VARCHAR},
			#{cnt, mode=IN, jdbcType=VARCHAR},
			#{prodCode, mode=IN, jdbcType=VARCHAR},
			#{empNum, mode=IN, jdbcType=VARCHAR}
			
		)}
	</insert>
	
	<!-- 입고 취소 -->
	<delete id="delStoreList" statementType="CALLABLE">
	{call prdt_store_cancle (
			#{prdtLot, mode=IN, jdbcType=VARCHAR}
		)}
	</delete>

<!-- 출고 전 그리드 조회 -->
<select id="getbeforeReleaseContList" resultType="BnsReleaseVO">
SELECT cont_det_code,
       cont_code,
       bns_contract.acc_name,
       prod_code,
       prod_name,
       cont_det_quan,
       cont_det_quan - nvl(SUM(bns_release_quan), 0) AS cont_req_quan,
       to_char(cont_det_release,'yyyy-mm-dd') cont_det_release
FROM bns_contract
JOIN bns_contract_detail USING ( cont_code )
LEFT OUTER JOIN bns_release USING ( cont_det_code )
WHERE cont_det_progress = '납기필요'
GROUP BY cont_det_code,
         cont_code,
         bns_contract.acc_name,
         prod_code,
         prod_name,
         cont_det_quan,
         cont_det_release
       
	</select>
	
	<!-- 출고전 주문서 그리드 조회 -->
	<select id="getbeforeReleaseOrdList" resultType="BnsReleaseVO">
		SELECT ord_det_code,
       ord_code,
       bns_order.acc_name,
       prod_code,
       prod_name,
       ord_det_quan,
       ord_det_quan - nvl(SUM(bns_release_quan), 0) AS ord_req_quan,
       to_char(ord_due_date,'yyyy-mm-dd') ord_due_date
FROM bns_order
JOIN bns_order_detail USING ( ord_code )
LEFT OUTER JOIN bns_release USING ( ord_det_code )
WHERE ord_det_progress = '접수완료'
GROUP BY ord_det_code,
         ord_code,
         bns_order.acc_name,
         prod_code,
         prod_name,
         ord_det_quan,
         ord_due_date
		
	</select>
<!-- 출고 LOT내역 그리드 -->
<select id="getLotReleaseList" resultType="BnsReleaseVO">
		select s.prdt_lot,
		s.prdt_nm,
		s.prod_code,
		m.cnt,
		(select to_char(sysdate,'yyyy-mm-dd') sys from dual) as sys,
		to_char(s.bns_store_date,'yyyy-mm-dd') bns_store_date,
		e.emp_name 
		from
		mak_prdt m join bns_store s
		on(m.prdt_lot = s.prdt_lot)
		join com_info_emp e
		on (s.emp_num = e.emp_num)
		where e.emp_num = s.emp_num and s.prod_code = #{prodCode}
		order by s.prdt_lot
</select>

<!-- 출고 등록 -->
<insert id="insertRelease" statementType="CALLABLE">
		{call prdt_release_register (
			#{prdtLot, mode=IN, jdbcType=VARCHAR},
			#{contDetCode, mode=IN, jdbcType=VARCHAR},
			#{ordDetCode, mode=IN, jdbcType=VARCHAR},
			#{bnsReleaseQuan, mode=IN, jdbcType=VARCHAR},
			#{bnsReleaseDate, mode=IN, jdbcType=VARCHAR},
			#{prdtCode, mode=IN, jdbcType=VARCHAR},
			#{accName, mode=IN, jdbcType=VARCHAR},
			#{prdtNm, mode=IN, jdbcType=VARCHAR},
			#{prdtLot, mode=IN, jdbcType=VARCHAR},
			#{bnsReleaseNote, mode=IN, jdbcType=VARCHAR},
			#{empNum, mode=IN, jdbcType=VARCHAR}
		)}
	</insert>
	
<!-- 출고내역 그리드 -->
	<select id="getSearchReleaseList" resultType="BnsReleaseVO">
	select bns_release_code,prdt_lot,acc_name,prdt_nm,bns_release_quan,to_char(bns_release_date,'yyyy-mm-dd') bns_release_date,bns_release_note,e.emp_name
         from bns_release r join com_info_emp e on(r.emp_num = e.emp_num)
         order by bns_release_code
	</select>
	
	
		<!-- 완제품LOT,제품코드, 제품명 검색 조회 -->
	<select id="getLOTPrdtList" resultType="BnsStoreVO">
	
	select prdt_lot, prod_code, prdt_nm
	from MAK_PRDT 
	where prdt_state = '입고대기' 
	order by prdt_lot desc
	<if test="keyword != null and keyword != ''">
	where prdt_lot =#{keyword}
	</if>
	</select>
	
			<!-- 완제품LOT,제품코드, 제품명 검색 조회 -->
	<select id="getLOTPrdtAfterList" resultType="BnsStoreVO">
	
	select prdt_lot, prod_code, prdt_nm
	from MAK_PRDT 
	where prdt_state = '입고완료' 
	order by prdt_lot desc
	<if test="keyword != null and keyword != ''">
	where prdt_lot =#{keyword}
	</if>
	</select>
	
	<!-- 입고관리페이지 조건 조회 -->
	<select id="getStoreListCon" resultType="BnsStoreVO">
	select *
		from(
		select 
		prdt_lot,
		prdt_nm, 
		prod_code, 
		cnt, 
		to_char(prdt_date,'yyyy-mm-dd') prdt_date, 
		prdt_state
		from MAK_PRDT
		<where>
		 <if test="prdtLot != null and prdtLot != ''"> 
		 and prdt_lot=#{prdtLot}
		</if>
		<if test="prdtDate != null and prdtDate != ''">
	<![CDATA[
			and prdt_date >= TO_DATE(#{prdtDate}, 'YYYY-MM-DD') 
	]]>
		</if>
		</where>
		)
		<where>
	<if test="prdtDate1 != null and prdtDate1 != ''">
	<![CDATA[		
		and prdt_date <= TO_DATE(#{prdtDate1}, 'YYYY-MM-DD')
	]]>
		</if>
		 and prdt_state = '입고대기'
		</where>
		order by prdt_lot
	</select>
	
	<!-- 입고조회페이지 조건 조회 -->
	<select id="getStoreSearchListCon" resultType="BnsStoreVO">
	select *
	from(
	select p.prdt_lot,
	 b.prdt_nm, 
	 b.bns_store_quan,
	  to_char(bns_store_date,'yyyy-mm-dd') bns_store_date,
	   e.emp_name emp_name, 
	   b.bns_store_note,
	    p.prdt_state 
    from com_info_emp e join bns_store b on(b.emp_num = e.emp_num)
    join mak_prdt p on (b.prdt_lot = p.prdt_lot)
		<where>
		 <if test="prdtNm != null and prdtNm != ''"> 
		 and b.prdt_nm=#{prdtNm}
		</if>
		<if test="prdtLot != null and prdtLot != ''"> 
		 and b.prdt_lot=#{prdtLot}
		</if>
		<if test="bnsStoreDate != null and bnsStoreDate != ''">
	<![CDATA[
			and bns_store_date >= TO_DATE(#{bnsStoreDate}, 'YYYY-MM-DD') 
	]]>
		</if>
		</where>
		)
		<where>
	<if test="bnsStoreDate1 != null and bnsStoreDate1 != ''">
	<![CDATA[		
		and bns_store_date <= TO_DATE(#{bnsStoreDate1}, 'YYYY-MM-DD')
	]]>
		</if>
		 and prdt_state = '입고완료'
		</where>
	</select>
	
	
	<!-- 출고관리페이지(계약) 조건 조회 -->
	<select id="getreleaseContListCon" resultType="BnsReleaseVO">
SELECT *
from(
		select
	   d.cont_det_code,
       d.cont_code,
       c.acc_name,
       d.prod_code,
       d.prod_name,
       d.cont_det_quan,
       d.cont_det_quan - nvl(SUM(r.bns_release_quan), 0) AS cont_req_quan,
       to_char(cont_det_release,'yyyy-mm-dd') cont_det_release
FROM bns_contract c
JOIN bns_contract_detail d on(c.cont_code = d.cont_code)
LEFT OUTER JOIN bns_release r on ( d.cont_det_code= r.cont_det_code )


         
		<where>
		 <if test="prodName != null and prodName != ''"> 
		 and prod_name=#{prodName}
		</if>
		<if test="contDetRelease != null and contDetRelease != ''">
	<![CDATA[
		and cont_det_release >= TO_DATE(#{contDetRelease}, 'YYYY-MM-DD') 
	]]>
		</if>
		
	<if test="contDetRelease1 != null and contDetRelease1 != ''">
	<![CDATA[		
		and cont_det_release <= TO_DATE(#{contDetRelease1}, 'YYYY-MM-DD')
	]]>
		</if>
	  	and cont_det_progress = '납기필요'
		</where>
		GROUP BY 
		d.cont_det_code,
         d.cont_code,
         c.acc_name,
         d.prod_code,
         d.prod_name,
         d.cont_det_quan,
         d.cont_det_release
         order by d.cont_det_code)
	</select>
	
	<!-- 출고관리페이지(주문) 조건 조회 -->
		<select id="getreleaseOrdListCon" resultType="BnsReleaseVO">
SELECT *
from(
		select
	   d.ord_det_code,
       d.ord_code,
       o.acc_name,
       d.prod_code,
       d.prod_name,
       d.ord_det_quan,
       d.ord_det_quan - nvl(SUM(r.bns_release_quan), 0) AS ord_req_quan,
       to_char(o.ord_due_date,'yyyy-mm-dd') ord_due_date
FROM bns_order o
JOIN bns_order_detail d on(o.ord_code = d.ord_code)
LEFT OUTER JOIN bns_release r on ( d.ord_det_code= r.ord_det_code )
		<where>
		 <if test="prodName != null and prodName != ''"> 
		 and prod_name=#{prodName}
		</if>
		<if test="ordDueDate != null and ordDueDate != ''">
	<![CDATA[
		and ord_due_date >= TO_DATE(#{ordDueDate}, 'YYYY-MM-DD') 
	]]>
		</if>
	<if test="ordDueDate1 != null and ordDueDate1 != ''">
	<![CDATA[		
		and ord_due_date <= TO_DATE(#{ordDueDate1}, 'YYYY-MM-DD')
	]]>
		</if>
	  	and ord_det_progress = '접수완료' 
		</where>
		GROUP BY 
		d.ord_det_code,
         d.ord_code,
         o.acc_name,
         d.prod_code,
         d.prod_name,
         d.ord_det_quan,
         o.ord_due_date
         order by d.ord_det_code)
	</select>
	
	
	<select id="getreleaseSearchListCon" resultType="BnsReleaseVO">
	select *
	from(
	select 
	bns_release_code,
	prdt_lot,
	acc_name,
	prdt_nm,
	bns_release_quan,
	to_char(bns_release_date,'yyyy-mm-dd') bns_release_date,
	bns_release_note,
	e.emp_name
         from bns_release r join com_info_emp e 
         on(r.emp_num = e.emp_num)
         
		<where>
		 <if test="prdtNm != null and prdtNm != ''"> 
		 and prdt_nm=#{prdtNm}
		</if>
		<if test="accName != null and accName != ''"> 
		 and acc_name=#{accName}
		</if>
		<if test="bnsReleaseDate != null and bnsReleaseDate != ''">
	<![CDATA[
			and bns_release_date >= TO_DATE(#{bnsReleaseDate}, 'YYYY-MM-DD') 
	]]>
		</if>
		</where>
		)
		<where>
	<if test="bnsReleaseDate1 != null and bnsReleaseDate1 != ''">
	<![CDATA[		
		and bns_release_date <= TO_DATE(#{bnsReleaseDate1}, 'YYYY-MM-DD')
	]]>
		</if>
		</where>
	</select>
	

	
</mapper>
